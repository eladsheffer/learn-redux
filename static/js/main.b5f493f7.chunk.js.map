{"version":3,"sources":["App.js","actions/index.js","reportWebVitals.js","reducers/counter.js","reducers/isLogged.js","reducers/index.js","index.js"],"names":["App","counter","useSelector","state","isLogged","dispatch","useDispatch","className","onClick","type","payload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","counterReducer","action","loggedReducer","allReducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAmBeA,MAhBf,WAEA,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCG,EAAWF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YACtCC,EAAUC,cAEd,OACE,sBAAKC,UAAU,MAAf,UACE,0CAAaN,KACb,wBAAQO,QAAS,WAAKH,ECXlB,CACFI,KAAM,YACNC,QDSuC,KAAzC,eACA,wBAAQF,QAAS,WAAKH,ECLlB,CACFI,KAAM,YACNC,QDGuC,KAAzC,eACCN,EAAU,gDAAwB,OEF1BO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCICQ,EAXQ,WAAwB,IAAvBjB,EAAsB,uDAAd,EAAGkB,EAAW,uCAC1C,OAAQA,EAAOZ,MACX,IAAK,YACD,OAAON,EAAQkB,EAAOX,QAC1B,IAAK,YACD,OAAOP,EAAQkB,EAAOX,QAC1B,QACI,OAAOP,ICEJmB,EATO,WAA4B,IAA3BnB,EAA0B,wDAAXkB,EAAW,uCAC7C,MACS,YADDA,EAAOZ,MAECN,EAEDA,GCIJoB,EALKC,YAAgB,CAChCvB,QAASmB,EACThB,SAAUkB,ICGRG,EAAQC,YAAYH,GAG1BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.b5f493f7.chunk.js","sourcesContent":["import {useSelector, useDispatch} from 'react-redux'\nimport {increment, decrement} from './actions'\n\nfunction App() {\n\nconst counter = useSelector(state => state.counter);\nconst isLogged = useSelector(state => state.isLogged);\nconst dispatch =useDispatch();\n\n  return (\n    <div className=\"App\">\n      <h1>Counter {counter}</h1>\n      <button onClick={()=>{dispatch(increment(1))}}>+</button>\n      <button onClick={()=>{dispatch(decrement(1))}}>-</button>\n      {isLogged? <h3>Just for users</h3>:''}\n    </div>\n  );\n}\n\nexport default App;\n","export const increment = (num) => {\r\n    return{ \r\n        type: 'INCREMENT',\r\n        payload: num \r\n    };\r\n}\r\n\r\nexport const decrement = (num) => {\r\n    return{ \r\n        type: 'DECREMENT',\r\n        payload: num  \r\n    };\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const counterReducer = (state = 0, action) => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return state + action.payload\r\n        case 'DECREMENT':\r\n            return state - action.payload\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default counterReducer;","const loggedReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case 'SIGN_IN':\r\n            return !state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default loggedReducer;","import counterReducer from \"./counter\";\r\nimport loggedReducer from \"./isLogged\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst allReducers = combineReducers({\r\n    counter: counterReducer,\r\n    isLogged: loggedReducer\r\n})\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport allReducers from './reducers'\nimport { Provider } from 'react-redux';\n\nconst store = createStore(allReducers);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}